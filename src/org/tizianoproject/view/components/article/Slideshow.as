//http://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=4415d421495d5b59d8537c0937fcce38&photoset_id=72157624101532779/** * ------------------------------------------------------- * Flickr Rest Request * ------------------------------------------------------- *  * Version: 1 * Created: cmendez@tizianoproject.org * Modified: 6/21/2010 *  * ------------------------------------------------------- * Notes: *  * FlickrRest Request makes requests and awaits a JSON response. *  * */package org.tizianoproject.view.components.article{	import com.chrisaiv.flickr.FlickrLoader;	import com.chrisaiv.utils.ShowHideManager;	import com.dtk.ImageManager;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.TextField;
		public class Slideshow extends MovieClip	{		private static const DEFAULT_X_POS:Number = 35;		private static const DEFAULT_Y_POS:Number = 105;		private static const DEFAULT_WIDTH:Number = 450;		private static const DEFAULT_HEIGHT:Number = 300;		private var images:Array;		private var im:ImageManager;		private var flickrLoader:FlickrLoader;				public var title_txt:TextField;		public var text_txt:TextField;				private var ssMask:Sprite;		private var container:Sprite		public function Slideshow()		{			images = new Array();			addEventListener(Event.ADDED_TO_STAGE, onAddedToStageHandler, false, 0, true );			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStageHandler, false, 0, true );		}				private function init():void		{			writeTitle( "" );			writeCaption( "" );		}				public function load( apiKey:String, photoset:String ):void		{			flickrLoader = new FlickrLoader();			flickrLoader.addEventListener( Event.COMPLETE, photoSetCompleteHandler, false, 0, true );			flickrLoader.addEventListener( IOErrorEvent.IO_ERROR, onErrorHandler, false, 0, true );			flickrLoader.addEventListener( IOErrorEvent.NETWORK_ERROR, onErrorHandler, false, 0, true );			flickrLoader.apiKey = apiKey;			flickrLoader.load( photoset );		}				private function photoSetCompleteHandler( e:Event ):void		{			trace( "Slideshow::photoSetCompleteHandler:" );			var flickrLoader:FlickrLoader = FlickrLoader( e.currentTarget );				flickrLoader.removeEventListener( Event.COMPLETE, photoSetCompleteHandler );			var totalImages:Number = flickrLoader.totalImages;									//Populate images:Array with the data			for( var i:uint = 0; i < totalImages; i++ ){				//trace( flickrLoader.photoSet[i].url, flickrLoader.photoSet[i].description );				images.push( { url: flickrLoader.photoSet[i].url, title: flickrLoader.photoSet[i].title, description: flickrLoader.photoSet[i].description } );			}			initSlideshow();		}				private function initSlideshow():void		{			//( imageWidth:uint, imageHeight:uint, spacing:uint, imageArray:Array )			im = new ImageManager( DEFAULT_WIDTH, DEFAULT_HEIGHT, 0, images );			im.name = "im";			im.x = DEFAULT_X_POS;			im.y = DEFAULT_Y_POS;			im.addEventListener( MouseEvent.CLICK, onMouseClickHandler, false, 0, true );			ShowHideManager.addContent( (this as Slideshow), im );			writeTitle( images[0].title );			writeCaption( images[0].description );					}		private function writeTitle( string:String ):void		{			title_txt.text = string;			}				private function writeCaption( string:String ):void		{			text_txt.text = string;			}						/**********************************		 * Event Handlers		 **********************************/		private function onMouseClickHandler( e:MouseEvent ):void		{			var currentIndex:Number = ImageManager(e.currentTarget).currentImage;			writeTitle( images[currentIndex].title );			writeCaption( images[currentIndex].description );						trace( "Slideshow::onMouseClickHandler:", currentIndex );		}				private function onErrorHandler( e:Event ):void		{			trace( "Slideshow::onErrorHandler:" );		}				private function unload():void		{			trace( "Slideshow::unload:" );			writeTitle( "" );			writeCaption( "" );						//ShowHideManager.unloadContent( (this as Slideshow ) );		}		private function onAddedToStageHandler( e:Event ):void		{			init();			//trace( "SlideShow::onAddedToStageHandler:" );		}				private function onRemovedFromStageHandler( e:Event ):void		{			unload();			//trace( "SlideShow::onRemovedFromStageHandler:" );		}			}}