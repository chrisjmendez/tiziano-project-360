/** * ------------------------------------------------------- * Tiziano Project Minisite * ------------------------------------------------------- *  * Version: 1 * Created: chrisaiv@gmail.com * Modified: 7/18/2010 *  * ------------------------------------------------------- * Notes: *  *  * */package org.tizianoproject{	import caurina.transitions.TweenListObj;		import com.chargedweb.swfsize.SWFSize;	import com.chargedweb.swfsize.SWFSizeEvent;	import com.chrisaiv.utils.ShowHideManager;	import com.greensock.TweenLite;	import com.gskinner.utils.SWFBridgeAS3;		import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundMixer;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import flash.system.Security;		import nl.demonsters.debugger.MonsterDebugger;		import org.adm.runtime.ModeCheck;	import org.casalib.util.LoadUtil;	import org.casalib.util.LocationUtil;	import org.tizianoproject.Application;	import org.tizianoproject.events.BaseViewEvent;	import org.tizianoproject.model.IModel;	import org.tizianoproject.model.MainObjectParams;	import org.tizianoproject.model.XMLLoader;	import org.tizianoproject.model.vo.Author;	import org.tizianoproject.model.vo.Story;	import org.tizianoproject.model.vo.Test;	import org.tizianoproject.view.*;	import org.tizianoproject.view.ArticleView;	import org.tizianoproject.view.components.Background;	import org.tizianoproject.view.components.FullScreen;	import org.tizianoproject.view.components.Overlay;	import org.tizianoproject.view.components.article.Feature;
		public class Application extends CompositeView	{		private static const XML_PATH:String = "http://www.tizianoproject.org/360/schema.xml";			//schema-072010		private static const XML_DATA_LOCAL_PATH:String = "http://localhost:8080/xml/tiziano/schema-072510.xml";				private static const SWF_PATH:String = "http://demo.chrisaiv.com/swf/tiziano/wall.swf";		private static const SWF_LOCAL_PATH:String = "wall.swf";				private static const SWF_BRIDGE:String = "swfBridge";		private static const SWF_BRIDGE_ON_SCREEN_RESIZE:String = "onScreenResize";		private static const SWF_BRIDGE_CONNECT:String = "swfBridgeConnect";				private static const DIRECTORY_TITLE_MENTORS:String = "The Tiziano Project Mentors";		private static const DIRECTORY_TITLE_REPORTERS:String = "The Tiziano Project Class of 2010";				private var context:LoaderContext;		private var swfLoader:Loader;		private var swfBridge:SWFBridgeAS3;						//Model		private var model:IModel;				//Views		private var mainObjectParams:MainObjectParams;				private var compositeView:CompositeView;		private var headerView:HeaderView;		private var profileView:ProfileView		private var footerView:FooterView;		private var articleView:ArticleView;		private var wallView:WallView;		private var directoryView:DirectoryView;		private var bg:Background;				//MonsterDebugger is like Firebug but for Flash		private var monster:MonsterDebugger;		//Browser Resiz Notifier		private var swfSizer:SWFSize;				private var randomColor:Number = Math.random() * 0xffffff;				private var sound:Sound				public function Application( main:DisplayObject, params:MainObjectParams )		{								//Load the Model			loadModel();						//Stage Objects			mainObjectParams = params;			//Debugger			monster = new MonsterDebugger( this );						addEventListener(Event.ADDED_TO_STAGE, onAddedToStageHandler, false, 0, true );					}				override protected function init():void		{			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						//SWF Sizer must go first in order to record the browser			initChrome( mainObjectParams );						initSwfBridge();									//Determine whether to run locally or from the live server			initWall( SWF_PATH );						//Composite View will update the Browser and Stage changes			compositeView = new CompositeView();			compositeView.add( headerView );			compositeView.add( footerView );			compositeView.add( bg );			compositeView.add( wallView );						//Catch Browser Changes and Dispatch them to all the Children of CompositeView			swfSizer = SWFSize.getInstance();			swfSizer.addEventListener( SWFSizeEvent.INIT, compositeView.swfSizerHandler, false, 0, true );			swfSizer.addEventListener( SWFSizeEvent.RESIZE, compositeView.swfSizerHandler );		}		//Load the XML Data		private function loadModel():void		{			model = new XMLLoader();			model.addEventListener( Event.COMPLETE, onXMLCompleteHandler, false, 0, true );			model.addEventListener( IOErrorEvent.IO_ERROR, onErrorHandler, false, 0, true );			model.addEventListener( IOErrorEvent.NETWORK_ERROR, onErrorHandler, false, 0, true );			model.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onErrorHandler, false, 0, true );			model.load( ( LocationUtil.isIde() ) ? XML_DATA_LOCAL_PATH : XML_PATH );		}		//SWFBridge Connects the AS3 SWF with the AS2 file		private function initSwfBridge():void		{			swfBridge = new SWFBridgeAS3( SWF_BRIDGE, this )			swfBridge.addEventListener( Event.CONNECT, onConnectHandler );					}				//On Item Roll over, play sound		private function initSound( path:String ):void		{			var soundBuffer:Number = 100;			sound = new Sound();			sound.addEventListener(IOErrorEvent.IO_ERROR, onErrorHandler, false, 0, true );			sound.addEventListener(Event.COMPLETE, onSoundCompleteHandler, false, 0, true );			sound.load( new URLRequest( path ), new SoundLoaderContext( soundBuffer, true ) );			sound.play( );		}				private function initWall( path:String ):void		{			wallView = mainObjectParams.wallView;			wallView.loadWall( path );		}				/**********************************		 * SWFBridge Handlers		 **********************************/		public function onConnectHandler( e:Event ):void		{			swfMessage( "connect" );		}				public function swfMessage( message:String ):void		{			switch( message ){				case "connect":					swfBridge.send( SWF_BRIDGE_CONNECT, "Sent From:", loaderInfo.url.substr(loaderInfo.url.lastIndexOf("/")) );					break;				default:					break;			}		}				public function onPressThumb( param1:*, param2:* ):void		{			var storyID:Number = param1.id;			var story:Story = model.getArticleByArticleID( storyID );			var otherStories:Array = model.getOtherArticlesByAuthorName( story.authorName, story.id );				otherStories.unshift( story );			trace( "Application::onPressThumb:", otherStories.length, otherStories[0].id );			updateArticleView( otherStories );		}				public function onRollOverThumb( param1:*, param2:* ):void		{			//trace( "Application::onRollOverThumb:", param1.description, param1.sound, param2 );			initSound( param1.sound );						footerView.updateText( param1.description, param2 );			footerView.stopTimer();			footerView.showFooter();		}				public function onRollOutThumb( param1:*, param2:* ):void		{			SoundMixer.stopAll();			//trace( "Application::onRollOutThumb:", param1.description, param2 );				footerView.updateText( "", "" );			footerView.startTimer();		}				//This indicates that the AS2 wall is connected		public function swfBridgeConnect( param1:String, param2:String ):void		{			trace( "Application::swfBridgeConnect: ", param1, param2 );		}						/**********************************		 * VIews		 **********************************/		//Connect the items on the Flash stage to their respective instances		private function initChrome( params:MainObjectParams ):void		{			bg  = params.bg;						headerView	= params.headerView;			headerView.addEventListener( MouseEvent.CLICK, onHeaderClickHandler, false, 0, true );						footerView	= params.footerView;		}						//DirectoryView is accessed by pressing "Mentors" or "Reporters"		private function initDirectoryView( ):void		{			directoryView = new DirectoryView( model );			directoryView.name = "directoryView";			directoryView.addEventListener( BaseViewEvent.CLOSE, hideView );			directoryView.addEventListener( BaseViewEvent.OPEN, onBaseViewHandler );		}						private function initArticleView( ):void		{									//////////////////////////////////////			//Temporary Data Request			//////////////////////////////////////			var storyID:Number = 160//151;			var stories:Array = model.getAllAuthorArticlesByID( storyID );			//////////////////////////////////////			//Initialize the Article View			articleView = new ArticleView( model );			articleView.name = "articleView";			articleView.addEventListener( BaseViewEvent.CLOSE, hideView );			articleView.addEventListener( BaseViewEvent.OPEN, onBaseViewHandler );			//updateArticleView( stories );		}				private function updateArticleView( array:Array ):void		{			SoundMixer.stopAll();						//trace( "Application::updateArticleView" );			articleView.authorStories = array;			articleView.currentIndex = 0;			articleView.loadStory();			showView( articleView );		}		private function initProfileView( ):void		{			profileView = new ProfileView( model );			profileView.name = "profileView";			profileView.addEventListener(MouseEvent.CLICK, onProfileClickHandler, false, 0, true );			profileView.addEventListener( BaseViewEvent.CLOSE, hideView );			profileView.addEventListener( BaseViewEvent.OPEN, hideView );		}				private function updateProfileView( name:String ):void		{			var author:Author = model.getAuthorByName( name );			profileView.vo = author;			profileView.load();		}				/**********************************		 * Show | Hide		 **********************************/		private function showView( view:DisplayObject ):void		{			ShowHideManager.addContent( (this as Application), view );						//Hide the Footer			if( footerView ) footerView.hideFooter( 0.5 );			//Hide the Wall			if( wallView ) if( wallView.alpha > 0 ) wallView.hideWall( );		}				//Generic view hider		private function hideView( e:BaseViewEvent ):void		{			if( e.type == BaseViewEvent.CLOSE ){				//BaseView.results will pass the name of the view to hide.				//trace( "Application::hideView:", e.results.viewName );				ShowHideManager.removeContent( (this as Application), e.results.viewName );				//Show the Wall				if( wallView ) if( wallView.alpha <= 0 ) wallView.showWall( );							}		}		/**********************************		 * Event Handlers		 **********************************/		private function onSoundCompleteHandler( e:Event ):void		{			//trace( "Application::onSoundCompleteHandler" );			}				private function onErrorHandler( e:ErrorEvent ):void		{			trace( "Application::onErrorHandler", e.text );		}				//Launch the Directories		private function onHeaderClickHandler( e:MouseEvent ):void		{			trace( "Application::onHeaderClickHandler:", e.target.name );			ShowHideManager.unloadContent( (this as Application ) );						//Backup Plan			if( !directoryView ) initDirectoryView();						switch( e.target.name ){				case "mentorsView":					directoryView.query = "Mentor";					directoryView.title = DIRECTORY_TITLE_MENTORS;					showView( directoryView );					break;				case "studentsView":					directoryView.query = "Reporter";					directoryView.title = DIRECTORY_TITLE_REPORTERS;					showView( directoryView );					break;			}		}				private function onProfileClickHandler( e:MouseEvent ):void		{			//trace( "C", e.target.name, e.target );			var story:Story;			var otherStories:Array;			var regExp:RegExp = new RegExp("feature");			if( regExp.test(e.target.name) ){				var feature:Feature = Feature(e.target);				var stories:Array = model.getAllAuthorArticlesByID( feature.vo.id );				updateArticleView( stories );			} else if( e.target.name == "imageLoader" ){				var f:Feature = Feature(e.target.parent.parent);				var stories:Array = model.getAllAuthorArticlesByID( f.vo.id );				updateArticleView( stories );			}		}				private function onBaseViewHandler( e:BaseViewEvent ):void		{			//trace( "Application::onBaseViewHandler:", e.type );			ShowHideManager.removeContent( (this as Application), "articleView" );			ShowHideManager.removeContent( (this as Application), "profileView" );			ShowHideManager.removeContent( (this as Application), "directoryView" );			switch( e.results.view ){				case "articleView":					var story:Story = e.results.data as Story;					var otherStories:Array = model.getOtherArticlesByAuthorName( story.authorName, story.id );						otherStories.unshift( story );						updateArticleView( otherStories );					break;				case "profileView":					profileView.vo = e.results.data as Author;					//trace( "onBaseViewHandler:", e.results.data as Author );					profileView.load();					showView( profileView );					break;				case "directoryView":									break;			}		}				private function onXMLCompleteHandler( e:Event ):void		{			initArticleView( );			initDirectoryView()			initProfileView();		}				}}