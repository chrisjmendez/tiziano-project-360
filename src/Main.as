/** ----------------------------------------------------------- * Tiziano Project 360 Main Class   * ----------------------------------------------------------- * Description: Central Nervous System * - --------------------------------------------------------- * Created by: cmendez@tizianoproject.org * Modified by:  * Date Modified: Always * - --------------------------------------------------------- * Copyright ©2010 * - --------------------------------------------------------- * * mustafa - goat * savina - tank top * ashna - glasses * beowa - yellow  * karogh - addidas, black pants * izan - plaid shirt *  *  *  */package {	import com.chargedweb.swfsize.SWFSize;	import com.chargedweb.swfsize.SWFSizeEvent;	import com.chrisaiv.utils.ShowHideManager;	import com.greensock.TweenLite;	import com.gskinner.utils.SWFBridgeAS3;		import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.system.LoaderContext;		import nl.demonsters.debugger.MonsterDebugger;		import org.adm.runtime.ModeCheck;	import org.casalib.util.LoadUtil;	import org.casalib.util.LocationUtil;	import org.tizianoproject.controller.Controller;	import org.tizianoproject.controller.IController;	import org.tizianoproject.events.BaseViewEvent;	import org.tizianoproject.model.IModel;	import org.tizianoproject.model.Model;	import org.tizianoproject.view.*;	import org.tizianoproject.view.ArticleView;	import org.tizianoproject.view.components.Background;	import org.tizianoproject.view.components.FullScreen;	import org.tizianoproject.view.components.Overlay;
		public class Main extends Sprite	{		private static const SWF_PATH:String = "http://demo.chrisaiv.com/swf/tiziano/wall.swf";		private static const SWF_LOCAL_PATH:String = "wall.swf";		private static const SWF_BRIDGE:String = "swfBridge";		private static const SWF_BRIDGE_ON_SCREEN_RESIZE:String = "onScreenResize";		private static const SWF_BRIDGE_CONNECT:String = "swfBridgeConnect";				private var context:LoaderContext;		private var loader:Loader;				private var swfBridge:SWFBridgeAS3;				private var model:IModel;		private var controller:IController;				//Views		public var wall_mc:MovieClip;		public var header_mc:HeaderView;		public var footer_mc:FooterView;		public var bg_mc:Background;				private var appStage:Stage;				private var headerView:HeaderView;		private var footerView:FooterView;		private var compositeView:CompositeView;		private var articleView:ArticleView;		private var studentsView:ListingBrickView;		private var mentorsView:ListingBrickView;				//Components		private var bg:Background;				//MonsterDebugger is like Firebug but for Flash		private var monster:MonsterDebugger;				private var swfSizer:SWFSize;		public function Main()		{					//Debugger			monster = new MonsterDebugger( this );			//Model			model = new Model();			//Controller			controller = new Controller( model );			//Views			appStage = stage;			appStage.align = StageAlign.TOP_LEFT;			appStage.scaleMode = StageScaleMode.NO_SCALE;			appStage.addEventListener( Event.RESIZE, onStageResizeHandler );			var online:Boolean = false;			if( online ){								//SWF Bridge				swfBridge = new SWFBridgeAS3( SWF_BRIDGE, this )				swfBridge.addEventListener( Event.CONNECT, onConnectHandler );								//Determine whether to run locally or from the live server				var path:String = ( LocationUtil.isIde() ) ? SWF_LOCAL_PATH : SWF_PATH;				initWall( path );			}			//Views			compositeView = new CompositeView( model, controller );						//showStudentsView();			initChrome();			initArticleView();						addEventListener(Event.ADDED_TO_STAGE, onAddedToStageHandler, false, 0, true );		}				/**********************************		 * 		 **********************************/		private function initWall( path:String ):void		{			//Load SWF			context = new LoaderContext( true );			loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteHandler, false, 0, true ); 			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onErrorHandler, false, 0, true ); 			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onErrorHandler, false, 0, true );			loader.load( new URLRequest( path ), context );			ShowHideManager.addContent( wall_mc, loader );					}				private function initSwfSizer():void		{			swfSizer = SWFSize.getInstance();			swfSizer.addEventListener(SWFSizeEvent.INIT, headerView.swfSizerHandler );			swfSizer.addEventListener(SWFSizeEvent.INIT, footerView.swfSizerHandler );			swfSizer.addEventListener(SWFSizeEvent.INIT, bg.swfSizerHandler );						swfSizer.addEventListener(SWFSizeEvent.RESIZE, headerView.swfSizerHandler );			swfSizer.addEventListener(SWFSizeEvent.RESIZE, footerView.swfSizerHandler );						swfSizer.addEventListener(SWFSizeEvent.RESIZE, bg.swfSizerHandler );					}				/**********************************		 * SWFBridge Handlers		 **********************************/		public function onConnectHandler( e:Event ):void		{			swfMessage( "connect" );		}				public function swfMessage( message:String ):void		{			switch( message ){				case "fullScreen":					swfBridge.send( SWF_BRIDGE_ON_SCREEN_RESIZE, message );										break;				case "normal":					swfBridge.send( SWF_BRIDGE_ON_SCREEN_RESIZE, message );					break;				case "connect":					swfBridge.send( SWF_BRIDGE_CONNECT, "Sent From:", loaderInfo.url.substr(loaderInfo.url.lastIndexOf("/")) );					break;			}		}				public function onPressThumb( param1:*, param2:* ):void		{			trace( "Main::onPressThumb:", param1, param2 );			showView( articleView );					}		public function onRollOverThumb( param1:*, param2:* ):void		{			//trace( "Main::onRollOverThumb:", param1.description, param2 );			footerView.updateText( param1.description );		}		public function onRollOutThumb( param1:*, param2:* ):void		{			//trace( "Main::onRollOutThumb:", param1.description, param2 );				footerView.updateText( "" );		}		//This indicates that the AS2 wall is connected		public function swfBridgeConnect( param1:String, param2:String ):void		{			trace( "Main::swfBridgeConnect: ", param1, param2 );		}						/**********************************		 * VIews		 **********************************/		private function initChrome():void		{			//HeaderView is already present on the stage			headerView = header_mc;						footerView = footer_mc;						bg = bg_mc;		}				private function initArticleView():void		{			//Add an Article Page			articleView = new ArticleView( model, controller );			articleView.name = "articleView";			articleView.addEventListener( BaseViewEvent.CLOSE, hideView );			compositeView.add( articleView );		}				private function showStudentsView():void		{			studentsView = new ListingBrickView( model, controller );			studentsView.name = "studentsView";			articleView.addEventListener( BaseViewEvent.CLOSE, hideView );			compositeView.add( articleView );			showView( studentsView );		}						/**********************************		 * Show | Hide		 **********************************/		private function showView( view:DisplayObject ):void		{			ShowHideManager.addContent( (this as Main), view );						hideWall();		}				//Generic view hider		private function hideView( e:BaseViewEvent ):void		{			//BaseView.results will pass the name of the view to hide.			//trace( "Main::hideView:", e.results.viewName );			ShowHideManager.removeContent( (this as Main), e.results.viewName );						showWall();		}				private function showWall():void		{			//Show The Wall			TweenLite.to( wall_mc, 0.5, { alpha: 1 } );		}				private function hideWall():void		{						//Hide the Wall			TweenLite.to( wall_mc, 0.5, { alpha: 0 } );		}				/**********************************		 * Event Handlers		 **********************************/		private function onAddedToStageHandler( e:Event ):void		{			initSwfSizer();			//B.  When there are mulitple objects on an Item Detail page, this will capture the ORN using Javascript			ExternalInterface.addCallback("sendAssetsFromJavaScript", setAssetsFromJavaScript);		}				private function setAssetsFromJavaScript( height:Number ):void		{			trace( "Main::setAssetsFromJavaScript:", height );			//Straight up Hack			footerView.updateYPos( height - footerView.height );		}				private function onStageResizeHandler( e:Event ):void		{			//trace( "Main::onStageResizeHandler:", swfSizer.bottomY, swfSizer.windowHeight );			//Notify the Wall//			swfMessage( appStage.displayState );						if( appStage.displayState == FullScreenEvent.FULL_SCREEN ){				//Reposition//				(this as Main).x = 0//= appStage.stageWidth / 2 - ( (this as Main).width /2 );//				(this as Main).y = 0// appStage.stageHeight / 2 - ( (this as Main).height /2 );			} else {				//Reposition//				(this as Main).x = (this as Main).y = 0;			}		}				private function onCompleteHandler( e:Event ):void		{			trace( "Main::onCompleteHandler: The Wall has been loaded" );		}				private function onErrorHandler( e:Event ):void		{			trace( "onErrorEventHandler:", e.type );		}			}}